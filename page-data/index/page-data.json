{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"references":{"html":"<table>\n<thead>\n<tr>\n<th>Reference</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Source code</td>\n<td><a href=\"https://github.com/effectsjs/effectsjs\">github.com/effectsjs/effectsjs</a></td>\n</tr>\n<tr>\n<td>Dan's Conceptualization</td>\n<td><a href=\"https://overreacted.io/algebraic-effects-for-the-rest-of-us/\">Algebraic Effects for the Rest of Us</a></td>\n</tr>\n</tbody>\n</table>"},"elevator_pitch":{"html":"<h2>TLDR, What are Algebraic Effects?</h2>\n<p>The best way to conceptualize the effect control flow is to expand upon an already well-known programming language construct: Exceptions.</p>\n<p>Consider the following example:</p>\n<pre><code class=\"language-javascript\">const child = () => {\n    throw \"Hello\"\n};\n\nconst parent = () => {\n    child();\n    doMoreWork();\n};\n\nconst main = () => {\n    try{\n      parent();\n    }catch(e){\n      console.log(e);\n    }\n}\n</code></pre>\n<p>Function calls get pushed onto the call-stack as they are invoked. Normally, as a function completes it's frame is\npopped off of the call stack and the previous stack frame is resumed. The above example demonstrates an alternative flow:\nwhen <code>child</code> throws an exception, the exception \"bubbles\" up the call-stack until a call-site with an exception handler is found.</p>\n<p>If you've been programming in a language that offers first-class support for exception handling as outlined above, you're most-likely\ncomfortable with the flow just described.</p>\n<p>Now let's tweak our existing mental model for this new concept. Imagine a catch-block that can resume back to the throwing call-site.\nIn the above example, our <code>catch</code> block in main, would recall to <code>child</code>. </p>\n<p>This is the crash course for the proposed control flow, and the keywords to facilitate it.</p>"},"keywords":{"html":"<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>perform</code></td>\n<td>Initiates an effect. The current function halts, and later resumes when an effect handler <code>resume</code>s</td>\n</tr>\n<tr>\n<td><code>handle</code></td>\n<td><code>try/handle</code> blocks allow users to specify handlers for effect events, using well-known <code>try/catch</code>-like semantics.  <code>try/handle</code> is <em>not</em> compatible with <code>try/catch</code></td>\n</tr>\n<tr>\n<td><code>recall</code></td>\n<td>Recalls the previously halted function, who called <code>perform</code>.</td>\n</tr>\n</tbody>\n</table>"}},"pageContext":{}}}