{"componentChunkName":"component---src-components-example-template-js","path":"/examples/concurrent-async-identity","result":{"data":{"file":{"fields":{"exampleSourceCode":"const delay = (ms) => new Promise((res) => setTimeout(res, ms));\nconst asyncIdentity = (name) => {\n  return perform { type: \"async_identity\", payload: { name } };\n};\n\nconst work = async (name) => {\n  \"use effects\";\n  try {\n    return asyncIdentity(name);\n  } handle \"async_identity\" with (e) {\n    const {\n      payload: { name },\n    } = e;\n    await delay(name === \"a\" ? 100 : 1);\n    console.log(`identity resolved: ${name}`);\n    recall name;\n  }\n};\n\nasync function main() {\n  console.log(\"firing events a, b, c\");\n  const aP = work(\"a\");\n  const bP = work(\"b\");\n  const cP = work(\"c\");\n  console.log(await Promise.all([aP, bP, cP]));\n}\n\nmain();\n"}}},"pageContext":{"slug":"/pages/examples/concurrent-async-identity"}}}