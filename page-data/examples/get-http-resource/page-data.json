{"componentChunkName":"component---src-components-example-template-js","path":"/examples/get-http-resource","result":{"data":{"file":{"fields":{"exampleSourceCode":"function main() {\n  \"use effects\";\n  try {\n    analyzePage(); // observe, _not_ async!\n  } handle \"get_page_size\" with (evt) {\n    getPageSize(evt.payload.url).then((size) => {\n      recall size;\n    });\n  }\n}\n\nfunction analyzePage() {\n  const start = Date.now();\n  const url = window.location.href;\n  const size = perform { type: \"get_page_size\", payload: { url } };\n  const { path: analysisPath } = perform {\n    type: \"flush_analysis\",\n    payload: { url, size },\n  };\n  const finish = Date.now();\n  console.info(\n    `{ duration: '${finish - start}ms', size: '${(size / 1000).toFixed(\n      2\n    )}kb', url: '${url}' } written to: ${analysisPath}`\n  );\n}\n\nasync function getPageSize(url) {\n  const res = await fetch(url);\n  if (!res.ok) throw new Error(\"failed to fetch page size\");\n  return parseFloat(res.headers.get(\"content-length\"));\n}\n\nfunction flushAnalysis(payload) {\n  // e.g. createReadStream(payload).pipe(fs.createWriteStream(...))\n  return Promise.resolve(payload).then(() => ({\n    path: \"/var/analyses/123.json\",\n  }));\n}\n\nmain();\n"}}},"pageContext":{"slug":"/pages/examples/get-http-resource"}}}